#!/usr/bin/env python
'''Test of NI-DM FSL export tool

@author: Camille Maumet <c.m.j.maumet@warwick.ac.uk>
@copyright: University of Warwick 2014
'''
import unittest
import os
from subprocess import call
import re
import rdflib
from rdflib.graph import Graph

from rdflib import Graph, plugin, Namespace
from rdflib.parser import Parser
from rdflib.serializer import Serializer
import shutil
import sys

RELPATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Add FSL NIDM export to python path
sys.path.append(RELPATH)

# Add nidm common testing code folder to python path
path = os.path.join(RELPATH, "nidm", "nidm", "nidm-results", "test")
sys.path.append(path)

from TestResultDataModel import TestResultDataModel
from TestCommons import *
from CheckConsistency import *

from FSLparser import FSL_NIDM

import logging
logger = logging.getLogger(__name__)

'''Tests based on the analysis of single-subject fmri fluency data as described at http://fsl.fmrib.ox.ac.uk/fslcourse/lectures/practicals/feat1/index.html but with only *1 contrast specified: Generation*
'''
class TestFSLResultDataModel(unittest.TestCase, TestResultDataModel):

    def setUp(self):
        TestResultDataModel.setUp(self) 
        self.ground_truth_dir = os.path.join(os.path.dirname(os.path.dirname(self.ground_truth_dir)), 'nidm', 'nidm-results','fsl', 'example001')

        # Current module directory is used as test directory
        self.test_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'example001')

        #  Turtle file obtained with FSL NI-DM export tool
        fsl_export_provn = os.path.join(self.test_dir, 'FSL_example.provn');
        self.fsl_export_ttl = get_turtle(fsl_export_provn)
        # fsl_export_json = os.path.join(self.test_dir, 'fsl', 'export', 'test01', 'fsl_nidm.json');
        # g.parse(data=testrdfjson, format="rdf-json")
        
        # RDF obtained by the FSL export 
        self.fslexport = Graph()
        # self.fsl_export_ttl = os.path.join(self.test_dir, 'fsl', 'export', 'test01', 'fsl_nidm.ttl');
        self.fslexport.parse(self.fsl_export_ttl, format='turtle')

        # Retreive owl file for NIDM-Results
        self.owl_file = os.path.join(RELPATH, 'nidm', 'nidm', 'nidm-results', 'nidm-results.owl')

        # Move in test dir (storage of prov file)
        fsl_expe_dir = os.path.join(RELPATH, 'test', 'data', 'fmri.feat')
        fsl_test_dir = os.path.join(RELPATH, 'test')

        if os.path.isdir(fsl_expe_dir):
            logging.debug("Computing NIDM FSL export")
            test_export_dir = os.path.join(fsl_test_dir, 'example001')
            # os.chdir(test_export_dir)

            # Convert to NI-DM using FSL export tool
            fslnidm = FSL_NIDM(feat_dir=fsl_expe_dir);
            fslnidm.save_prov_to_files()

            # Copy provn export to test directory
            shutil.copy(os.path.join(fsl_expe_dir, 'nidm', 'nidm.provn'), os.path.join(test_export_dir, 'FSL_example.provn'))

    def test01_class_consistency_with_owl(self):
        my_exception = check_class_names(self.fslexport, "FSL example001", owl_file=self.owl_file)

        # FIXME (error message display should be simplified when only one example...)
        if my_exception:
            error_msg = ""
            for unrecognised_class_name, examples in my_exception.items():
                error_msg += unrecognised_class_name+" (from "+', '.join(examples)+")"
            raise Exception(error_msg)


    def test02_attributes_consistency_with_owl(self):
        my_exception = check_attributes(self.fslexport, "FSL example001", owl_file=self.owl_file)

        # FIXME (error message display should be simplified when only one example...)
        error_msg = ""
        if my_exception[0]:
            for unrecognised_attribute, example_names in my_exception[0].items():
                error_msg += unrecognised_attribute+" (from "+', '.join(example_names)+")"
        if my_exception[1]:
            for unrecognised_range, example_names in my_exception[1].items():
                error_msg += unrecognised_range+" (from "+', '.join(example_names)+")"
        if error_msg:
            raise Exception(error_msg)


    '''Test03: Comparing that the ttl file generated by FSL and the expected ttl file (generated manually) are identical'''
    # FIXME: If terms PR is accepted then these tests should be moved to TestResultDataModel.py
    def test03_ex1_auditory_singlesub_full_graph(self):
        ground_truth_provn = os.path.join(self.ground_truth_dir, 'fsl_nidm.provn');
        ground_truth_ttl = get_turtle(ground_truth_provn)

        # RDF obtained by the ground truth export
        gt = Graph()
        gt.parse(ground_truth_ttl, format='turtle')

        # print("Comparing "+ground_truth_ttl+" with "+self.fsl_export_ttl)

        self.compare_full_graphs(gt, self.fslexport)

        if self.my_execption:
            raise Exception(self.my_execption)

    # '''Test02: Test availability of attributes needed to perform a meta-analysis as specified in use-case *1* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test02_metaanalysis_usecase1(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """
    #     # Look for:
    #     # - "location" of "Contrast map",
    #     # - "location" of "Contrast variance map",
    #     # - "prov:type" in "nidm" namespace of the analysis software.
    #     query = prefixInfo+"""
    #     SELECT ?cfile ?efile ?stype WHERE {
    #      ?aid a fsl:contrast ;
    #           prov:wasAssociatedWith ?sid.
    #      ?sid a prov:Agent;
    #           a prov:SoftwareAgent;
    #           a ?stype . 
    #      FILTER regex(str(?stype), "nidm") 
    #      ?cid a nidm:contrastMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?cfile .
    #      ?eid a nidm:contrastStandardErrorMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?efile .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test03: Test availability of attributes needed to perform a meta-analysis as specified in use-case *2* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test03_metaanalysis_usecase2(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - "location" of "Contrast map",
    #     # - "prov:type" in "nidm" namespace of the analysis software.
    #     query = prefixInfo+"""
    #     SELECT ?cfile ?efile ?stype WHERE {
    #      ?aid a fsl:contrast ;
    #           prov:wasAssociatedWith ?sid.
    #      ?sid a prov:Agent;
    #           a prov:SoftwareAgent;
    #           a ?stype . 
    #      FILTER regex(str(?stype), "nidm") 
    #      ?cid a nidm:contrastMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?cfile .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test04: Test availability of attributes needed to perform a meta-analysis as specified in use-case *3* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test04_metaanalysis_usecase3(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - "location" of "Statistical map",
    #     # - "nidm:errorDegreesOfFreedom" in "Statistical map".
    #     query = prefixInfo+"""
    #     SELECT ?sfile ?dof WHERE {
    #      ?sid a nidm:statisticalMap ;
    #           prov:atLocation ?sfile ;
    #           nidm:errorDegreesOfFreedom ?dof .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test05: Test availability of attributes needed to perform a meta-analysis as specified in use-case *4* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test05_metaanalysis_usecase4(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - For each "Peak" "equivZStat" and"coordinate1" (and optionally "coordinate2" and "coordinate3"),
    #     # - "clusterSizeInVoxels" of "height threshold"
    #     # - "value" of "extent threshold"
    #     query = prefixInfo+"""
    #     SELECT ?equivz ?coord1 ?coord2 ?coord3 ?ethresh ?hthresh WHERE {
    #      ?pid a fsl:peakLevelStatistic ;
    #         prov:atLocation ?cid ;
    #         nidm:equivalentZStatistic ?equivz ;
    #         prov:wasDerivedFrom ?clid .
    #      ?cid a nidm:coordinate;
    #         nidm:coordinate1 ?coord1 .
    #         OPTIONAL { ?cid nidm:coordinate2 ?coord2 }
    #         OPTIONAL { ?cid nidm:coordinate3 ?coord3 }
    #      ?iid a nidm:inference .
    #      ?esid a fsl:excursionSet;
    #         prov:wasGeneratedBy ?iid .
    #      ?setid a fsl:setLevelStatistic;
    #         prov:wasDerivedFrom ?esid .
    #      ?clid a fsl:clusterLevelStatistic;
    #         prov:wasDerivedFrom ?setid .
    #      ?tid a nidm:extentThreshold ;
    #         nidm:clusterSizeInVoxels ?ethresh .
    #      ?htid a nidm:heightThreshold ;
    #         prov:value ?hthresh .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

if __name__ == '__main__':
    unittest.main()

